/*
Script generated by Aqua Data Studio 19.0.1-5 on mar-04-2025 09:19:18 PM
Database: mdn
Schema: <All Schemas>
Objects: PROCEDURE
*/
-- create dba procedure sqlj.alter_java_path(varchar(255), lvarchar)
-- external name 'informix.jvp.dbapplet.impl.JarHandler.alterJavaPath(java.lang.String, java.lang.String)' language java end procedure;
-- GO
-- create dba procedure informix.cdrcmdproc(informix.integer)
--     external name '(cdrcmd_1)'
--     language C
--   end procedure;
-- GO

GO

GO
CREATE PROCEDURE cierre_mensual()
--DEFINICION DE VARIABLES A UTILIZAR
DEFINE fecha_traslado datetime year to month;
DEFINE fecha_movimiento datetime year to minute;
DEFINE sal_cuota char(1);
DEFINE sal_cuota_r char(1);
DEFINE sal_tipo integer;
DEFINE sal_tipo_r integer;
DEFINE id_generado integer;
DEFINE cantidad integer;
DEFINE cantidad_r integer;
DEFINE dependencia_entrega integer;

--OBTIENE FECHA ACTUAL
let fecha_traslado = today;
let fecha_movimiento = today;


foreach 
    select codigo_desc, saldo
    into sal_tipo_r, cantidad_r
    
    from
(SELECT distinct desc,  sum(ingresos) - (sum(salidas) + sum(reasignacion)) as saldo, codigo_desc from(
            SELECT 
            t1.com_desc as desc, t1.com_code as codigo_desc, me1.men_tipo as tipo , d1.dep_desc_lg as dep, d1.dep_id as dep_code,
            SUM(m1.mov_cantidad) as ingresos, 0 as salidas, 0 as reasignacion
            
            FROM comb_movimientos m1
            INNER JOIN comb_solicitudes s1 ON m1.mov_solicitud = s1.sol_id 
            INNER JOIN comb_asignaciones a1 ON s1.sol_asignacion = a1.asig_id
            INNER JOIN comb_proyectos p1 ON a1.asig_proyecto = p1.pro_id
            INNER JOIN comb_mensuales me1 ON p1.pro_mensual = me1.men_id
            INNER JOIN comb_contratos c1 ON me1.men_contrato = c1.cont_id
            INNER JOIN lveh_combustible t1 ON c1.cont_tipo_combustible = t1.com_code
            INNER JOIN comb_dependencias d1 ON m1.mov_dep = d1.dep_id
            where m1.mov_tipo = 'T' and s1.sol_recibe = 56

            group by desc, tipo, dep, codigo_desc, dep_code
            UNION 
   select t2.com_desc as desc, t2.com_code as codigo_desc, me2.men_tipo as tipo, d2.dep_desc_lg as dep, d2.dep_id as dep_code, 0 as ingresos, SUM(m2.mov_cantidad) as salida, 0 as reasignacion
            from comb_movimientos m2
            INNER JOIN comb_vales v2 ON m2.mov_vale = v2.val_id 
            INNER JOIN comb_asignaciones a2 ON v2.val_asignacion = a2.asig_id
            INNER JOIN comb_proyectos p2 ON a2.asig_proyecto = p2.pro_id
            INNER JOIN comb_mensuales me2 ON p2.pro_mensual = me2.men_id
            INNER JOIN comb_contratos c2 ON me2.men_contrato = c2.cont_id
            INNER JOIN lveh_combustible t2 ON c2.cont_tipo_combustible = t2.com_code
            INNER JOIN comb_dependencias d2 ON m2.mov_dep = d2.dep_id
            where mov_tipo = 'S' AND VAL_DESPACHO = 56 and mov_dep != 56


            group by desc, tipo, dep, codigo_desc, dep_code
            
            
            union 
            
              select t2.com_desc as desc, t2.com_code as codigo_desc, v2.sal_cuota as tipo, d2.dep_desc_lg as dep, d2.dep_id as dep_code, 0 as ingresos, 0 as salidas, SUM(m2.mov_cantidad) as reasignacion
            from comb_movimientos m2
            INNER JOIN comb_asignaciones_saldos v2 ON m2.mov_traslado = v2.sal_id 
            INNER JOIN lveh_combustible t2 ON t2.com_code = v2.sal_tipo
            INNER JOIN comb_dependencias d2 ON m2.mov_dep = d2.dep_id
            where mov_tipo = 'N' and mov_dep != 56
                group by desc, tipo, dep, codigo_desc, dep_code


        

            )

            group by desc, tipo, codigo_desC
             having  sum(ingresos) - (sum(salidas) + sum(reasignacion)) > 0)
             
    
    
        insert into comb_asignaciones_saldos (sal_fecha, sal_cuota, sal_tipo, sal_situacion) values (fecha_traslado, 'O', sal_tipo_r, 1);
    LET id_generado = DBINFO('sqlca.sqlerrd1');
    
    insert into comb_movimientos (mov_dep,mov_tipo,mov_cantidad, mov_fecha, mov_traslado, mov_situacion) values (56, 'R', round(cantidad_r * 0.60) , fecha_movimiento, id_generado, 1);
    
    insert into comb_asignaciones_saldos (sal_fecha, sal_cuota, sal_tipo, sal_situacion) values (fecha_traslado, 'E', sal_tipo_r, 1);
    LET id_generado = DBINFO('sqlca.sqlerrd1');
    
    insert into comb_movimientos (mov_dep,mov_tipo,mov_cantidad, mov_fecha, mov_traslado, mov_situacion) values (56, 'R', round( cantidad_r * 0.40) , fecha_movimiento, id_generado, 1);
    
    
 end foreach

--OBTIENE DATOS DEL QUERY DE SALDOS
foreach 
    select tipo, codigo_desc, saldo, dep_code
    into sal_cuota, sal_tipo, cantidad, dependencia_entrega
    
    from
(SELECT distinct desc, tipo, dep, sum(ingresos) - (sum(salidas) + sum(reasignacion)) as saldo, codigo_desc, dep_code from(
            SELECT 
            t1.com_desc as desc, t1.com_code as codigo_desc, me1.men_tipo as tipo , d1.dep_desc_lg as dep, d1.dep_id as dep_code,
            SUM(m1.mov_cantidad) as ingresos, 0 as salidas, 0 as reasignacion
            
            FROM comb_movimientos m1
            INNER JOIN comb_solicitudes s1 ON m1.mov_solicitud = s1.sol_id 
            INNER JOIN comb_asignaciones a1 ON s1.sol_asignacion = a1.asig_id
            INNER JOIN comb_proyectos p1 ON a1.asig_proyecto = p1.pro_id
            INNER JOIN comb_mensuales me1 ON p1.pro_mensual = me1.men_id
            INNER JOIN comb_contratos c1 ON me1.men_contrato = c1.cont_id
            INNER JOIN lveh_combustible t1 ON c1.cont_tipo_combustible = t1.com_code
            INNER JOIN comb_dependencias d1 ON m1.mov_dep = d1.dep_id
            where m1.mov_tipo = 'T' and s1.sol_recibe = 56

            group by desc, tipo, dep, codigo_desc, dep_code
            UNION 
   select t2.com_desc as desc, t2.com_code as codigo_desc, me2.men_tipo as tipo, d2.dep_desc_lg as dep, d2.dep_id as dep_code, 0 as ingresos, SUM(m2.mov_cantidad) as salida, 0 as reasignacion
            from comb_movimientos m2
            INNER JOIN comb_vales v2 ON m2.mov_vale = v2.val_id 
            INNER JOIN comb_asignaciones a2 ON v2.val_asignacion = a2.asig_id
            INNER JOIN comb_proyectos p2 ON a2.asig_proyecto = p2.pro_id
            INNER JOIN comb_mensuales me2 ON p2.pro_mensual = me2.men_id
            INNER JOIN comb_contratos c2 ON me2.men_contrato = c2.cont_id
            INNER JOIN lveh_combustible t2 ON c2.cont_tipo_combustible = t2.com_code
            INNER JOIN comb_dependencias d2 ON m2.mov_dep = d2.dep_id
            where mov_tipo = 'S' AND VAL_DESPACHO = 56 and mov_dep != 56


            group by desc, tipo, dep, codigo_desc, dep_code
            
            
            union 
            
              select t2.com_desc as desc, t2.com_code as codigo_desc, v2.sal_cuota as tipo, d2.dep_desc_lg as dep, d2.dep_id as dep_code, 0 as ingresos, 0 as salidas, SUM(m2.mov_cantidad) as reasignacion
            from comb_movimientos m2
            INNER JOIN comb_asignaciones_saldos v2 ON m2.mov_traslado = v2.sal_id 
            INNER JOIN lveh_combustible t2 ON t2.com_code = v2.sal_tipo
            INNER JOIN comb_dependencias d2 ON m2.mov_dep = d2.dep_id
            where mov_tipo = 'N' and mov_dep != 56
                group by desc, tipo, dep, codigo_desc, dep_code


        

            )

            group by desc, tipo, dep, codigo_desc, dep_code
             having  sum(ingresos) - (sum(salidas) + sum(reasignacion)) > 0)
             
    --CREA UNA NUEVA ASIGNACIï¿½N DE SALDOS
    insert into comb_asignaciones_saldos (sal_fecha, sal_cuota, sal_tipo, sal_situacion) values (fecha_traslado, sal_cuota, sal_tipo, 1);
    
    --OBTIENE EL ID GENERADO EN EL ULTIMO INSERT
    LET id_generado = DBINFO('sqlca.sqlerrd1');
    
    --INSERTA UN MOVIMIENTO DE INGRESO Y DE SALIDA A LAS DEPENDENCIAS 

    insert into comb_movimientos (mov_dep,mov_tipo,mov_cantidad, mov_fecha, mov_traslado, mov_situacion) 
    values (dependencia_entrega, 'N', cantidad, fecha_movimiento, id_generado, 1);
    

    
    
 end foreach
 

 end procedure
GO
-- CREATE PROCEDURE dummyproc_1150xc6()
-- end procedure;
-- GO
-- CREATE PROCEDURE dummyproc_1170()
-- end procedure;
-- GO
-- CREATE PROCEDURE dummyproc_1210()
-- end procedure;


-- create dba procedure informix.ifx_allow_newline (informix.boolean);
-- external name '' language C
-- end procedure;
-- GO
-- create dba procedure
--   informix.ifx_Def2Mart(
--     acceleratorname varchar(128),
--     martname varchar(128),
--     dbname varchar(128) default NULL)
--   with (handlesnulls)
--   external name '$INFORMIXDIR/lib/libdwa.udr(def2mart)' language C
-- end procedure;
-- GO
-- create dba procedure informix.ifx_grid_connect(informix.lvarchar)
--   with (handlesnulls,parallelizable)
--   external name '(grid_connect1)'
--   language C
--   end procedure;
-- GO
-- create dba procedure
--   informix.ifx_grid_connect(
--     informix.lvarchar,
--     informix.integer)
--   with (handlesnulls,parallelizable)
--   external name '(grid_connect4)'
--   language C
--   end procedure;
-- GO
-- create dba procedure
--   informix.ifx_grid_connect(
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls,parallelizable)
--   external name '(grid_connect2)'
--   language C
--   end procedure;
-- GO
-- create dba procedure
--   informix.ifx_grid_connect(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.integer)
--   with (handlesnulls,parallelizable)
--   external name '(grid_connect3)'
--   language C
--   end procedure;
-- GO
-- create dba procedure
--     informix.ifx_grid_copy(
--             informix.lvarchar,
--             informix.lvarchar)
--     with (handlesnulls)
--     external name '(grid_copy1)'
--     language C
--     end procedure;
-- GO
-- create dba procedure
--     informix.ifx_grid_copy(
--             informix.lvarchar,
--             informix.lvarchar,
--             informix.lvarchar)
--     with (handlesnulls)
--     external name '(grid_copy2)'
--     language C
--     end procedure;
-- GO
-- create dba procedure
--     informix.ifx_grid_copy(
--             informix.lvarchar,
--             informix.lvarchar,
--             informix.lvarchar,
--             informix.lvarchar)
--     with (handlesnulls)
--     external name '(grid_copy3)'
--     language C
--     end procedure;
-- GO
-- create dba procedure
--   informix.ifx_grid_disconnect()
--   with (handlesnulls, parallelizable)
--   external name '(grid_disconnect)'
--   language C
--   end procedure;
-- GO
-- create dba procedure
--   informix.ifx_grid_execute(
--         informix.lvarchar,
--         informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_execute2)'
--   language C
--   end procedure;
-- GO
-- create dba procedure
--   informix.ifx_grid_execute(
--         informix.lvarchar,
--         informix.lvarchar,
--         informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_execute3)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_executecmd()
--     with (handlesnulls)
--     external name '(grid_executeCmd)'
--     language C
--     end procedure;
-- GO
-- create dba procedure 
--   informix.ifx_grid_procedure(
--         informix.lvarchar,
--         informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_procedure2)'
--   language C
--   end procedure;
-- GO
-- create dba procedure
--   informix.ifx_grid_procedure(
--         informix.lvarchar,
--         informix.lvarchar,
--         informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_procedure3)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_purge()
--   external name '(grid_purge0)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_purge(
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_purge1)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_purge(
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_purge2)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_purge(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_purge3)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_purge(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_purge4)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_purge(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_purge5)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_purge(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_purge6)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_redo()
--   external name '(grid_redo0)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_redo(
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_redo1)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_redo(
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_redo2)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_redo(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_redo3)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_redo(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_redo4)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_redo(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_redo5)'
--   language C
--   end procedure;
-- GO
-- create dba procedure informix.ifx_grid_redo(
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar,
--     informix.lvarchar)
--   with (handlesnulls)
--   external name '(grid_redo6)'
--   language C
--   end procedure;
-- GO
-- create dba procedure
--   informix.ifx_Probe2Mart(
--     dbname varchar(128),
--     martname varchar(128),
--     sql_id int8 default NULL)
--   with (handlesnulls)
--   external name '$INFORMIXDIR/lib/libdwa.udr(probe2mart)' language C
-- end procedure;
-- GO
-- create dba procedure informix.ifx_set_erstate( informix.integer)
--     external name '(ifx_set_erstate1)'
--     language C
--     end procedure;
-- GO
-- create dba procedure informix.ifx_set_erstate( informix.lvarchar)
--     external name '(ifx_set_erstate2)'
--     language C
--     end procedure;
-- GO
-- create dba procedure
--   informix.ifx_Xml2Mart(
--     martdef clob,
--     dbname varchar(128) default NULL)
--   with (handlesnulls)
--   external name '$INFORMIXDIR/lib/libdwa.udr(xml2mart)' language C
-- end procedure;
-- GO
create dba procedure "informix".insert_sql_lang()

    if (se_or_ol() = 'OL') then
	insert into xSQL_LANGUAGES values('X/OPEN SQL','1992','XPG4',
				'YES', 'ONLINE DSA', 'EMBEDDED', 'C'); 
	insert into xSQL_LANGUAGES values('X/OPEN SQL','1992','XPG4',
				'YES', 'ONLINE DSA', 'EMBEDDED', 'COBOL'); 
	insert into xSQL_LANGUAGES values('ANSI X3.135','1992','ENTRY',
				'YES', 'ONLINE DSA', 'EMBEDDED', 'C'); 
	insert into xSQL_LANGUAGES values('ANSI X3.135','1992','ENTRY',
				'YES', 'ONLINE DSA', 'EMBEDDED', 'COBOL'); 
    end if; 
end procedure
document
	'populate xSQL_LANGUAGES table for OL only, nothing for SE',
	'Synopsis: insert_sql_lang() returns nothing';
GO
create dba procedure "informix".insert_srv_info()
define log_flag, ansi_flag char; 
define engine_type char(2); 

    let engine_type = se_or_ol();  
    if (engine_type = 'SE') then	
	insert into xSERVER_INFO values('ENGINE TYPE','Standard Engine'); 
	insert into xSERVER_INFO values('ROW_LENGTH', '32511'); 
    else
	insert into xSERVER_INFO values('ENGINE TYPE','Online DSA'); 
	insert into xSERVER_INFO values('ROW_LENGTH', '32767'); 
    end if; 

    insert into xSERVER_INFO values('IDENTIFIER_LENGTH', '18'); 
    insert into xSERVER_INFO values('USERID_LENGTH','8'); 
    insert into xSERVER_INFO values('COLLATION_SEQ','ISO 8859-1'); 

    let log_flag, ansi_flag = is_log_ansi(); 

    if (engine_type = 'SE') or (log_flag = 'N') then
	insert into xSERVER_INFO values('TXN_ISOLATION', 'READ UNCOMMITTED'); 
    elif (log_flag = 'Y') and (ansi_flag = 'N') then
	insert into xSERVER_INFO values('TXN_ISOLATION', 'READ COMMITTED');  
    elif (ansi_flag = 'Y') then
	insert into xSERVER_INFO values('TXN_ISOLATION', 'SERIALIZABLE');  
    end if; 

end procedure
document
	'populate xSERVER_INFO table',
	'Synopsis: insert_srv_info() returns nothing';
GO
---
---	Register builtin java UDRs for Krakatoa
---

-- create dba procedure sqlj.install_jar(varchar(255), varchar(255))
-- external name 'informix.jvp.dbapplet.impl.JarHandler.installJar(java.lang.String, java.lang.String)' language java end procedure;
-- GO
-- create dba procedure sqlj.install_jar(varchar(255), varchar(255), int)
-- external name 'informix.jvp.dbapplet.impl.JarHandler.installJar(java.lang.String, java.lang.String, int)' language java end procedure;
-- GO
-- create dba procedure sqlj.install_jar_deploy(varchar(255), varchar(255))
-- external name 'informix.jvp.dbapplet.impl.JarHandler.installJarDeploy(java.lang.String, java.lang.String)' language java end procedure;
-- GO

---
---	Register builtin java UDRs for Krakatoa
---

-- create dba procedure sqlj.registerJUDTfuncs(varchar(255)) external name
--  'informix.jvp.dbapplet.impl.JarHandler.registerJUDTfuncs(java.lang.String)'
--  language java end procedure;
-- GO
-- create dba procedure sqlj.remove_jar(varchar(255))
-- external name 'informix.jvp.dbapplet.impl.JarHandler.removeJar(java.lang.String) ' language java end procedure;
-- GO
-- create dba procedure sqlj.remove_jar(varchar(255), int)
-- external name 'informix.jvp.dbapplet.impl.JarHandler.removeJar(java.lang.String, int) ' language java end procedure;
-- GO
-- create dba procedure sqlj.remove_jar_undeploy(varchar(255))
-- external name 'informix.jvp.dbapplet.impl.JarHandler.removeJarUndeploy(java.lang.String)' language java end procedure;
-- GO
-- create dba procedure sqlj.replace_jar(varchar(255), varchar(255))
-- external name 'informix.jvp.dbapplet.impl.JarHandler.replaceJar(java.lang.String, java.lang.String)' language java end procedure;
-- GO
-- create dba procedure sqlj.setUDTExtName(varchar(255), varchar(255))
-- external name 'informix.jvp.dbapplet.impl.JarHandler.setUDTExternalName(java.lang.String, java.lang.String)' language java end procedure;
-- GO
CREATE PROCEDURE sp_datosfza()
  delete from f_datosfza;

/*estas son totales*/
  insert into f_datosfza
  select dep_llave,dep_desc_md,gra_clase,'P',org_grado,count(*),0,0
  from morg,mdep,grados
  where org_grado = gra_codigo
  and dep_llave = org_dependencia
  and org_situacion = "A"
  and org_ceom != "TITULO"
  group by dep_llave,dep_desc_md,gra_clase,org_grado;

/*estas son llenas*/
  insert into f_datosfza
  select dep_llave,dep_desc_md,gra_clase,'P',per_grado,0,count(*),0
  from mper,morg,mdep,grados
  where per_plaza = org_plaza
  and per_grado = gra_codigo
  and org_dependencia = dep_llave
  and per_plaza not in (9999,99999)
  and org_situacion = 'A'
  group by dep_llave,dep_desc_md,gra_clase,per_grado;

/*estas son las vacantes (aunque estaria de mas)*/
  insert into f_datosfza
  select dep_llave,dep_desc_md,gra_clase,'P',org_grado,0,0,count(*)
  from morg,mdep,grados
  where org_grado = gra_codigo
  and dep_llave = org_dependencia
  and org_situacion = "A"
  and org_ceom != "TITULO"
  and org_plaza not in
  (select per_plaza from mper
   where per_plaza not in (9999,99999))
  group by dep_llave,dep_desc_md,gra_clase,org_grado;

/*se cuadra */
  update f_datosfza set df_dclase = '01.OFICIALES' where df_clase in ('1','2');
  update f_datosfza set df_dclase = '02.ASIMILADOS' where df_clase = '3';
  update f_datosfza set df_dclase = '03.ESPECIALISTAS' where df_clase = '4';
  update f_datosfza set df_dclase = '04.CADETES/ALUMNOS' where df_clase = '5';
  update f_datosfza set df_dclase = '05.TROPA' where df_clase = '6';

END PROCEDURE;
GO
---migrado
CREATE OR REPLACE PROCEDURE sp_his_morg(
    plaza IN NUMBER,     
    ceom IN VARCHAR2,  
    grado IN NUMBER,
    desc_plaza IN VARCHAR2,  
    accion IN CHAR,
    usuario IN VARCHAR2,  
    fecha IN TIMESTAMP
) IS
   
    descripcion_empleo VARCHAR2(45);
BEGIN
  
    SELECT per_desc_empleo INTO descripcion_empleo
    FROM mper, morg
    WHERE org_plaza = per_plaza
    AND org_plaza = plaza;


    INSERT INTO his_morg (
        his_plaza, his_ceom, his_grado,
        his_plaza_desc, his_desc_empleo, his_accion, his_usuario,
        his_hora
    ) VALUES (
        plaza, ceom, grado, desc_plaza, descripcion_empleo, accion,
        usuario, fecha
    );
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Si no se encuentra ningÃºn registro, manejar el error
        DBMS_OUTPUT.PUT_LINE('No se encontrÃ³ la descripciÃ³n del empleo para la plaza ' || plaza);
    WHEN OTHERS THEN
        -- Manejo de cualquier otro error
        DBMS_OUTPUT.PUT_LINE('Error al procesar: ' || SQLERRM);
END sp_his_morg;
/

GO
CREATE PROCEDURE spf_cerrados()
  update agtsa set ag_des_flag = 'C'  
    where ag_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and ag_des_flag = 'N';

  update banejer_car set car_si_no = 'C'
    where car_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and car_si_no = 'N';

  update dfdes_btrab set dfdt_si_no = 'C'
    where dfdt_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and dfdt_si_no = 'N';

  update dfdes_gra set dfdg_si_no = 'C'
    where dfdg_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and dfdg_si_no = 'N';

  update dfdes_inv set dfdi_si_no = 'C'
    where dfdi_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and dfdi_si_no = 'N';

  update f_amt set amt_si_no = 'C'
    where amt_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and amt_si_no = 'N';

  update f_asgral set as_si_no = 'C'
    where as_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and as_si_no = 'N';

  update f_bac set bac_si_no = 'C'
    where bac_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and bac_si_no = 'N';

  update f_cmm set cmm_control = 5
    where cmm_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and cmm_control= 0;

  update findustria set ind_control ='C' 
    where ind_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and ind_control = 'N';

  update f_ipm_cart set ipc_status ='C' 
    where ipc_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and ipc_status = 'N';

  update f_ipm_cart set ipc_motivo ='CODIGO CERRADO' 
    where ipc_status = 'C';

  update ipm_fact set fact_estado ='C' 
    where fact_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and fact_estado = 'N';

  update ipm_manto set man_descontada ='C' 
    where man_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and man_descontada = 'N';

  update economato set eco_control ='C' 
    where eco_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and eco_control = 'N';

  update dfdes_grat set dfdg_si_no = 'C'
    where dfdg_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and dfdg_si_no = 'N';

  update dfdes_invt set dfdi_si_no = 'C'
    where dfdi_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and dfdi_si_no = 'N';

  update f_hreal set hr_control ='C'
    where hr_catalogo in
    (select per_catalogo
     from mper,morg
     where per_plaza = org_plaza
     and org_cod_pago = '2'
     and per_situacion in("1T","11","12","1$","1P","1Q","1R"))
     and hr_control = 'N';


end procedure;
GO

CREATE PROCEDURE spf_destinos()
  update agtsa set ag_des_flag = 'D'  
    where ag_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and ag_des_flag = 'N';

  update banejer_car set car_si_no = 'D'
    where car_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and car_si_no = 'N';

  update dfdes_btrab set dfdt_si_no = 'D'
    where dfdt_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and dfdt_si_no = 'N';

  update dfdes_gra set dfdg_si_no = 'D'
    where dfdg_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and dfdg_si_no = 'N';

  update dfdes_inv set dfdi_si_no = 'D'
    where dfdi_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and dfdi_si_no = 'N';

  update f_amt set amt_si_no = 'D'
    where amt_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and amt_si_no = 'N';

  update f_asgral set as_si_no = 'D'
    where as_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and as_si_no = 'N';

  update f_bac set bac_si_no = 'D'
    where bac_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and bac_si_no = 'N';

  update f_cmm set cmm_control = 4
    where cmm_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and cmm_control = 0;

  update findustria set ind_control ='D' 
    where ind_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and ind_control = 'N';

  update f_ipm_cart set ipc_status ='D' 
    where ipc_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and ipc_status = 'N';

  update f_ipm_cart set ipc_motivo ='NO ESTA ACTIVO' 
    where ipc_status = 'D';

  update ipm_fact set fact_estado ='D' 
    where fact_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and fact_estado = 'N';

  update ipm_manto set man_descontada ='D' 
    where man_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and man_descontada = 'N';

  update economato set eco_control ='D' 
    where eco_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and eco_control = 'N';

  update dfdes_grat set dfdg_si_no = 'D'
    where dfdg_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("T0"))
    and dfdg_si_no = 'N';

  update dfdes_invt set dfdi_si_no = 'D'
    where dfdi_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("T0"))
    and dfdi_si_no = 'N';
  update f_hreal set hr_control ='D'
    where hr_catalogo not in
    (select per_catalogo from mper
     where per_situacion in("1T","11","12","1$","1P","1Q","1R"))
    and hr_control = 'N';


end procedure;
GO
